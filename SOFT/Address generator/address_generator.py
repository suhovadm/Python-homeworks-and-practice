# Импортируем модуль random, он необходим для генерации случайных значений, IP-шников и MAC-ов.
import random

# Функции для генерации адресов.

# Используем генераторное выражение, чтобы сгенерировать четыре случайных числа от 0 до 255 включительно
# и соединяем их в строку с помощью join и точки как разделителя.
# Переменная _ используется для итерации, чтобы сгенерировать n-ое количество байтов для IP-адреса.
# Поскольку нам не нужно использовать значение итератора (то есть, мы не хотим знать, какой именно
# номер итерации в данный момент), мы используем _, чтобы указать, что это просто плейсхолдер.
def generate_external_ipv4():
    return '.'.join(str(random.randint(0, 255)) for _ in range(4))

# Функция для генерации внутренних IPv4 адресов, которые находятся в определённых диапазонах.
def generate_internal_ipv4():

    # Сначала, случайным образом, выбирается один из трёх диапазонов:
    # 1) 10.x.x.x
    # 2) 172.16.x.x
    # 3) 192.168.x.x
    range_choice = random.choice(['10', '172', '192'])

    # И в зависимости от выбора, она генерирует соответствующий адрес.

    # В данном случае рандомно генерируем три октета после 10-ки.
    if range_choice == '10':
        return f'10.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}'

    # В данном случае, точно задаём диапазон подсети после 172-х, от 16 до 31
    # и уже после этого генерируем 2 последующих октета.
    elif range_choice == '172':
        subnet = random.randint(16, 31)
        return f'172.{subnet}.{random.randint(0, 255)}.{random.randint(0, 255)}'

    # У диапазона 192.168.х.х первые два октета фиксированы, а последние два генерятся
    # случайным образом.
    elif range_choice == '192':
        return f'192.168.{random.randint(0, 255)}.{random.randint(0, 255)}'

# Генерируем IPv6 адрес.
# Создаём 8 групп по четыре шестнадцатеричных символа (от 0000 до FFFF) и соединяем их двоеточием.
def generate_ipv6():
    return ':'.join(f'{random.randint(0, 0xFFFF):x}' for _ in range(8))

# Генерируем MAC-адрес.
# MAC-адрес состоит из шести групп по два шестнадцатеричных символа.
# Каждое число генерируется в диапазоне от 0 до 255 и выводится в виде шестнадцатеричной строки
# с нулями перед числом, например 01, 2a и т.д.
def generate_mac():
    return ':'.join(f'{random.randint(0, 255):02x}' for _ in range(6))