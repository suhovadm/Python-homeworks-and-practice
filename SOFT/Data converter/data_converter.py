# Импортируем содержимое файлов.
# Из функций конверсий импортируем всё.
# Из меню импортируем конкретно display_menu, хотя она там одна.
from conversions import *
from menu import display_menu

# Заводим функцию process_choice с параметром choice, для выбора параметров.
def process_choice(choice):

    # Обработка ввода. Проверяем, какой пункт выбрал пользователь,
    # и в зависимости от этого выполняем соответствующую конвертацию.
    # В f-строки передаём функции с параметрами.

    if choice == '1':
        bytes = float(input("Введите количество байт:~$ "))
        print(f"\n{bytes} байт = {bytes_to_kilobytes(bytes)} килобайт\n")

    elif choice == '2':
        kilobytes = float(input("Введите количество килобайт:~$ "))
        print(f"\n{kilobytes} килобайт = {kilobytes_to_megabytes(kilobytes)} мегабайт\n")

    elif choice == '3':
        megabytes = float(input("Введите количество мегабайт:~$ "))
        print(f"\n{megabytes} мегабайт = {megabytes_to_gigabytes(megabytes)} гигабайт\n")

    elif choice == '4':
        gigabytes = float(input("Введите количество гигабайт:~$ "))
        print(f"\n{gigabytes} гигабайт = {gigabytes_to_terabytes(gigabytes)} терабайт\n")

    elif choice == '5':
        kilobytes = float(input("Введите количество килобайт:~$ "))
        print(f"\n{kilobytes} килобайт = {kilobytes_to_bytes(kilobytes)} байт\n")

    elif choice == '6':
        megabytes = float(input("Введите количество мегабайт:~$ "))
        print(f"\n{megabytes} мегабайт = {megabytes_to_kilobytes(megabytes)} килобайт\n")

    elif choice == '7':
        gigabytes = float(input("Введите количество гигабайт:~$ "))
        print(f"\n{gigabytes} гигабайт = {gigabytes_to_megabytes(gigabytes)} мегабайт\n")

    elif choice == '8':
        terabytes = float(input("Введите количество терабайт:~$ "))
        print(f"\n{terabytes} терабайт = {terabytes_to_gigabytes(terabytes)} гигабайт\n")

    # Если пользователь выбрал #9, программа прерывает цикл while, выводя сообщение
    # "До новых встреч" и завершает работу.
    elif choice == '9':
        print("\nДо новых встреч.")

        # Когда пользователь выбирает #9 (выход из программы), это говорит о том,
        # что основная программа должна завершить цикл while и выйти, что приводит
        # к завершению работы программы.
        return False

    # Если пользователь ввёл несуществующий пункт меню, программа информирует его
    # об этом и предлагает попробовать снова.
    else:
        print('\nНеверный ввод, пожалуйста, попробуйте снова.\n')

    # Этот True используется, когда пользователь осуществил корректный выбор
    # от 1 до 8. Таким образом, функция выполняет соответсвующую конвертацию
    # и завершает работу, возвращая True. Это означает, что цикл choice
    # внутри функции main(), внутри while(True), должен продолжаться,
    # и программа снова будет запрашивать ввод у пользователя.
    return True

# Заводим основную функцию main(), которая будет управлять пользовательским
# интерфейсом и взаимодействием с пользователем.
def main():

    # Заводим бесконечный цикл while. Он будет работать до тех пор, пока
    # пользователь не выберет "Выход" (пункт 9) и не прервёт цикл брейком (break).
    while(True):

        # Подтягиваем функцию display_menu из файла menu.py,
        # она загружена импортом в самом верху.
        display_menu()

        # Приглашение к вводу команды.
        # Обычный input возвращает значение в виде строки, поэтому, если мы ставим обычный input,
        # то результат будет строкой, даже если пользователь вводит число. В нашем случае мы
        # сравниваем переменную choice (которая является строкой с другими строками - '1', '2' и т.д.
        # Поэтому, здесь стоит обычный input, а не int(input(...)
        choice = input("Пожалуйста, выберите пункт меню выше:~$ ")
        if not process_choice(choice):
            break

# Запуск программы.
# Проверяем, является ли данный файл основным модулем, который запускается,
# и если да, вызывает функцию main(), тем самым начиная выполнение программы.
if __name__ == "__main__":
    main()
