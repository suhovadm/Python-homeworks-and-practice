# Реализуем алгоритм для нахождения наибольшего общего делителя (НОД) двух чисел
# с использованием рекурсивной функции. В данном случае, описан более правильный
# вариант с обработкой ошибок и возможностью выхода из программы по клавише Q.

# Заводим функцию, передаём ей два параметра: value1 и value2.
def NOD(value1, value2):
    if value2 == 0:  # В качестве базового условия рекурсии задаём параметр,
        # что value2 == 0. Если value2 == 0, возвращаем value1.
        # То есть, если ввести например 5 и 0, вернётся значение 5.
        return value1
    # Если переделать return value1 на value2, будет возвращать 0,
    # так как value2 равен 0.

    # Иначе. Возвращаем функцию NOD, с параметрами:
    # находим остаток от деления у value1.
    # Например, 30 и 18, остаток от деления будет 12 (30 - 18 = 12).
    # Например, 15 и 5, остаток от деления будет 10 (15 - 5 = 10).
    # Например, 30 и 12, остаток от деления будет 18 (30 - 12 = 18).
    # И теперь, чтобы получить НОД, вычитаем из получившегося числа (12, 10, или 18)
    # value2, которое вводили изначально, и перекидываем его со знаком (+).
    else:
        return NOD(value2, value1 % value2)

# Запускаем цикл while, чтобы программа перезапускалась.
while (True):
    try:

        # Приглашение к вводу команд.
        user_input1 = input('Введите первое число, или q для выхода:~$ ')
        if user_input1.lower() == 'q':
            print('Выход из программы.')
            break
        value1 = int(user_input1)

        user_input2 = input('Введите второе число, или q для выхода:~$ ')
        if user_input2.lower() == 'q':
            print('Выход из программы.')
            break
        value2 = int(user_input2)

        print(f'Наибольший общий делитель: {NOD(value1, value2)}')  # Принтуем НОД на экран.

    except ValueError:
        print('Некорректный ввод. Пожалуйста, введите целые числа.')
    except KeyboardInterrupt:
        print('\nВыход из программы.')
        break
