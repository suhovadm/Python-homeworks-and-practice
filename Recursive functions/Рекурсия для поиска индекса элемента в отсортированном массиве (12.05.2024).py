# Написание рекурсивной функции для поиска индекса элемента в отсортированном массиве.

# Заводим функцию binary_search, которая принимает 4 аргумента:
# arr - отсортированный массив, в котром мы ищем элемент.
# target - сам элемент, который нужно найти.
# left - индекс левой границы текущего подмассива.
# right - индекс правой границы текущего подмассива.

def binary_search(arr, target, left, right):

    # Если левая граница больше правой, это означает, что элемент не найден, и функция возвращает -1.
    if left > right:
        return -1  # Элемент не найден.

    # Вычисляем индекс середины текущего подмассива.
    mid = (left + right) // 2

    # Если элемент в середине массива равен искомому элементу (target), то мы нашли элемент и возвращаем
    # его индекс mid.
    if arr[mid] == target:
        return mid  # Элемент найден, возвращаем индекс.

    # Если элемент в середине меньше искомого элемента, это означает, что искомый элемент находится в правой
    # части массива. Мы вызываем функцию binary_search рекурсивно, передавая новый диапазон: от mid + 1 до right.
    elif arr[mid] < target:
        return binary_search(arr, target, mid + 1, right)  # Ищем в правой части.

    # Если элемент в середине больше искомого элемента, это означает, что искомый элемент находится в левой
    # части массива. Мы снова вызываем функцию binary_search рекурсивно, но теперь диапазон от left до mid - 1.
    else:
        return binary_search(arr, target, left, mid - 1)  # Ищем в левой части.

# Создаём массив под названием massive с неотсортированными значениями.
massive = [1, 5, 3]

# Сортируем массив с помощью встроенной функции sorted(), и сохраняем результат в переменную
# sorted_massive. В нашем случае sorted_massive будет равен [1, 3, 5].
sorted_massive = sorted(massive)

# Принтуем отсортированный массив на экран.
print("Отсортированный массив:", sorted_massive)

# Вызываем функцию binary_search для поиска элемента 3 в sorted_massive, начиная с индексов 0
# (левая граница) и len(sorted_massive) - 1 (правая граница, то есть последний индекс массива).
index = binary_search(sorted_massive, 3, 0, len(sorted_massive) - 1)

# Выводим индекс найденного массива. Если элемент найден, то индекс будет равен 1, так как
# элемент находится на позиции 1 в отсортированном массиве.
print("Индекс элемента 3:", index)

