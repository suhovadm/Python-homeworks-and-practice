# 1.1
# Усовершенствованный метод сортировки пузырьком.
# Усовершенствование состоит в том, чтобы анализировать
# количество перестановок на каждом шагу, если это количество
# равно нулю, то продолжать сортировку нет смысла — список отсортирован.

# Общее количество цифр в списке.
all = 6

# Список с цифрами.
list = [7, 2, 5, 6, 9, 3]

# Заводим счётчик количества СРАВНЕНИЙ.
sravn_counter = 0

# Заводим счётчик количества ПЕРЕСТАНОВОК внутри массива.
perest_counter = 0

# Внешний цикл, отвечает за количество общих обходов.
# Обходов должно быть на 1 меньше, чем количество элементов внутри массива, поэтому делаем -1.
# Делая 1 обход внешним циклом, у нас всплывёт 1 пузырёк внутренним циклом.
for a in range(all - 1):

    # Внутренний цикл. Идём по всем индексам, кроме последнего.
    # Если вычесть проход первичного цикла, скорость работы алгоритма увеличится.
    for i in range(all - 1 - a):

        # Запускаем счётчик количества СРАВНЕНИЙ.
       sravn_counter += 1
       print('Идёт сравнение #', sravn_counter, f'Сравниваются {list[i]} с {list[i + 1]}''.')

        # Если текущий элемент больше, чем его сосед справа, то --->
       if list[i] > list[i + 1]:

            # запуская счётчик количества ПЕРЕСТАНОВОК
            perest_counter += 1

            # ---> мы меняем их местами.
            list[i], list[i + 1] = list[i + 1], list[i]

            # Если количество ПЕРЕСТАНОВОК равно 0,
            if perest_counter == 0:

                # выходим из цикла, список отсортирован.
                break

    # Принтуем отсортированный список на экран и
    print(list)

# количество ПЕРЕСТАНОВОК на экран.
print('Количество замен:', perest_counter)