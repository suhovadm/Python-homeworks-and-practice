# 8.
# Метод сортировки Шелла, продвинутый вариант сортировки вставками.

# Преимущества: эффективен для относительно небольших списков.
# Недостатки: не эффективен для длинных списков и элементов расположенных далеко друг от друга.

# Заводим функцию shellSort, передаём в неё 2 аргумента: data и size.
def shellSort(data, size):

    # Заводим переменную interval, делим массив на 2 части.
    interval = size // 2

    # Запускаем цикл while, где говорим, что interval больше нуля.
    # Пока интервал больше нуля, алгоритм продолжает работу.
    # После каждой итерации интервал делится пополам (interval //=2), чтобы
    # постепенно уменьшить расстояние между сравниваемыми элементами.
    while interval > 0:

        # Дальше, запускаем немного изменённую сортировку вставками.
        # Воторым параметром, по идее, надо ставить size,
        # но в теории, будет работать, если передать len(data), аналогично сортировке вставками.
        # Через неё мы узнаем количество элементов в массиве.
        for i in range(interval, len(data)): # <-- Сортировка начинается по переменной interval и до конца.

            # Передаём в temp = data[i], получаем значение элемента.
            temp = data[i] # <-- Здесь всё как в обычной сортировке вставками.

            # Если поставить j = i - 1, или i - interval, получим мешанину из цифр.
            j = i # <-- В сортировке вставками: j = i - 1, здесь просто j = i.

            # Запускаем ещё один цикл while. Здесь немного не так как во Вставках...
            # Во вставках: j >= 0, здесь j >= interval-a.
            # Во вставках: temp < data[j], здесь data[j - interval] > temp

            # Пока j >= interval и элемент, расположенный interval позиции слева (data[j - interval]),
            # больше temp, происходит сдвиг этого элемента вправо (data[j] = data[j - interval]),
            # а j уменьшается на interval.
            # Таким образом, элемент temp вставляется в его правильное место среди отсортированных
            # элементов, расположенных на расстоянии interval.
            while j >= interval and data[j - interval] > temp:

                # Во Вставках: data[j + 1] = data[j] (переставляем элементы местами).
                # В Шелле: data[j] = data[j - interval]
                data[j] = data[j - interval]

                # Дальше, во Вставках: j -= 1 (с шагом назад в 1 пункт).
                # В Шелле: j -= interval
                j -= interval
            data[j] = temp # Вставляем элементы на место, аналогично Вставкам.

        # Дальше, интервал ещё раз делится на 2, к этому моменту интервал уже должен быть равен 0.
        # А поскольку интервал равен 0, массив отсортирован.
        interval //=2

# Заводим переменную data, передаём массив со списком.
data = [9, 8, 6, 7, 2, 1, 4, 5, 3, 0, 10, 12, 11]

# Запускаем функцию.
shellSort(data, len(data))

# Принтуем функцию на экран.
print('Отсортированный список:')
print(data)